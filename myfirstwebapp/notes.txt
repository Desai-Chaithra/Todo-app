spring-boot-web Application-v2 -> git

jsp - view technologies

localhost:8080/say-hello
try to see a page source by right-clicking
try to inspect the web page and go to network -> doc 

a browser sends a request -> HTTP request
server/ application handles the request
your spring boot web application 

server returns the response - HTTP response


logging is the most important thing. logs are so important
knowing what is log is a very very essential thing for a programmer
with the help of spring-boot-starter-web -> logging will be directly implemented
Logback with SLF4j (default logging info)


server returns the response -> http response
peek in history
 all code in views (jsp's)
 view logic, flow logic, queries to data bases
 all the logic is written in the jsp's
 there is zero separation of concerns
 difficult to maintain 
 this is called model 1 architecture
 
 model 2
 model -> data to generate the view
 view -> show information to the user
 controller -> controls the flow
 simpler to maintain
 where to implement common features to all the controllers
 
 model - 2 front controller
 concept -> all requests flow into a central controller
 called a from controller
 front controller controls the flow to controller's and view's 
 common features can be implemented in the front controller
 
 
 
 
dispatcher servlet model 2
receives HTTP request
processes HTTP request
identifies the correct controller method based on the request URL

executes the controller method
returns model and view name
identifies correct view
using view resolver
executes view
returns the http response

 # todo
 id
 username
 des
 target date
 done
 
 todoControlelr
 todo . jsp
 
 
 
 // request ->
 once response is sent back from the application to the browser, then the memory will be lost,
 to make it available, we will use sessions to store the data'
 recommended for most use cases
 in sessions, details are stored across multiple requests
 // this takes additional memory
 //be careful about what you store
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.in28Minutes.springboot</groupId>
    <artifactId>myfirstwebapp</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>myfirstwebapp</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>glassfish-jstl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.in28Minutes.springboot</groupId>
	<artifactId>myfirstwebapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>myfirstwebapp</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>glassfish-jstl</artifactId>
		</dependency>	

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 package com.in28Minutes.springboot.myfirstwebapp.login;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;


@Controller
@SessionAttributes("name") // to retain the data for a longer time
// you need to use @SessionAttributes under @Controller
public class LoginController{
	
	private AuthenticationService authenticationService;
	
	
	
	public LoginController(AuthenticationService authenticationService) {
		super();
		this.authenticationService = authenticationService;
	}

	// supports get method
	@RequestMapping(value="login", method = RequestMethod.GET)
	public String gotoLoginPage() {
		return "login";
	}
	
	// supports post method
	//login?name=chaithra RequstParam
	@RequestMapping(value="login", method = RequestMethod.POST)
	public String gotoWelcomePage(@RequestParam String name, @RequestParam String password,
			ModelMap model) {
		
		if (authenticationService.authenticate(name, password)) {
		model.put("name", name);
		
		//Authentication logic
		// name -> cd
		//password -> dummy
		return "welcome";
		}
		model.put("errorMessage", "Invalid Credentials! please try again");
		return "login";
	}
}






























<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.5</version> <!-- Spring Boot version 3.3.5 -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.in28Minutes.springboot</groupId>
    <artifactId>myfirstwebapp</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>myfirstwebapp</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web (for building web applications) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Jakarta JSTL (Spring Boot 3.x and greater) -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>glassfish-jstl</artifactId>
           <!-- <version>2.0.0</version> --> <!-- Ensure you use the latest version -->
        </dependency>

        <!-- Tomcat Jasper (JSP support in Spring Boot) -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Spring Boot DevTools (Optional for faster development) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot Starter Test (For testing purposes) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin (for packaging and running the application) -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>


/META-INF/ resources/webjars/
bootstrap/5.1.3/css/
bootstrap.min.css


/META-INF/resources/webjars/
bootstrap/5.1.3.js/bootstrap.min.js

/META-INF/resources/webjars/jquery/3.6.0/jquery.min.js




1. spring boot starter validation (pom.xml)
2. Command Bean (two way binding) -> directly bind values
3. add validations to bean
4. todo.java
display validation errors in the view in todo.jsp











/META-INF/resources/webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js
/META-INF/resources/webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css












webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js
webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css